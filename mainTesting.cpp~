	#include <iostream>
	#include <sstream>
	#include <random>
	#include <assert.h>
	#include <vector>
	//class individual;
	class objectiveFunctionStrategy;
	class individual{
		private:
			std::vector<float> 				featureVector;
			objectiveFunctionStrategy *		ofstrategy;
			unsigned int ndim;
			
		public:
			/*Constructors*/
			individual(std::vector<float>);
			float getObjectiveFunction();
			void setObjectiveFunction(objectiveFunctionStrategy*);
			
			std::vector<float> getFeatureVector();
	};	
	class objectiveFunctionStrategy
	{
	public:
		virtual float evaluate(individual)=0;
	};
	
	class ObjectiveFunctionhyperBowl: public objectiveFunctionStrategy
	{
	public:
		float evaluate(individual ind){
			float Fc =0 ;
			std::vector<float> v = ind.getFeatureVector();
			for(unsigned int i=0;i<v.size();i++){
				Fc += v[i]*v[i];
			}
			return Fc;
		}
	};
	

	
	individual::individual(std::vector<float> fv){
		for(unsigned int i=0;i<fv.size() ; i++){
			featureVector.push_back(fv[i]);
		}
		this -> ndim = featureVector.size();
	}
	
	std::vector<float> individual::getFeatureVector(){
		return this->featureVector;
	}
	
	float individual::getObjectiveFunction(){
		float Fc=0;
		std::vector<float> vv = this->featureVector;
		Fc = ofstrategy->evaluate(vv);
		return Fc;
	}
	
	void individual::setObjectiveFunction(objectiveFunctionStrategy* strategy ){
		ofstrategy = strategy;
		//this->ofstrategy = new ObjectiveFunctionhyperBowl;
	}
	
	
	int main(){
		
		std::vector<float> v;
		/*ObjectiveFunctionhyperBowl hb;
		objectiveFunctionStrategy* ofs;
		ofs = dynamic_cast<objectiveFunctionStrategy*> (&hb);
		*/
		individual indiv(v);
		indiv.setObjectiveFunction(new ObjectiveFunctionhyperBowl);
		indiv.getObjectiveFunction();
		//indiv(v);
		
		v.push_back(2.1);
		v.push_back(22.1);
		/*
		hb.evaluate(indiv);*/
	}
